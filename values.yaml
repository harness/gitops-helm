## Harness GitOps Agent configuration
## Ref: https://github.com/harness/gitops-helm
## Documentation: https://developer.harness.io/docs/category/gitops

## Variable Overrides for Argo CD configuration
argo-cd:
  # -- Provide a name in place of `harness`
  nameOverride: harness
  # -- String to fully override `"argo-cd.fullname"`
  fullnameOverride: harness-gitops

  ## Globally shared configuration
  global:
    # -- Toggle and define pod-level security context.
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault

  ## Argo Configs
  configs:
    # General Argo CD configuration
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
    cm:
      # Comma delimited list of additional custom remote values file schemes (http are https are allowed by default).
      # Change to empty value if you want to disable remote values files altogether.
      helm.valuesFileSchemes: >-
        secrets+gpg-import, secrets+gpg-import-kubernetes,
        secrets+age-import, secrets+age-import-kubernetes,
        secrets,secrets+literal,
        https

      # This allows for a cluster entity to be created for the cluster that your agent is installed in
      # It should be false for Namespaced Agent installations
      cluster.inClusterEnabled: "true"

  ## Custom resource configuration
  crds:
    # -- Keep CRDs on chart uninstall
    keep: false

  ## Argo CD Application controller
  controller:
    # -- Resource limits and requests for the Application controller pods
    resources:
      limits:
        cpu: "1"
        memory: 2Gi
      requests:
        cpu: "1"
        memory: 2Gi

  ## Argo CD ApplicationSet controller
  applicationSet:

    ## Metrics service configuration
    metrics:
      # -- Deploy metrics service
      enabled: true

    # -- Resource limits and requests for the ApplicationSet controller pods.
    resources:
      requests:
        memory: 512Mi
        cpu: "1"
      limits:
        memory: 512Mi
        cpu: "1"

    ## Webhook for the Git Generator
    ## Ref: https://argocd-applicationset.readthedocs.io/en/master/Generators-Git/#webhook-configuration)
    webhook:
      ingress:
        # -- Enable an ingress resource for Webhooks
        enabled: true

  ## Argo CD Repo Server
  repoServer:
    # -- Environment variables to pass to repo server
    env:
      - name: HELM_PLUGINS
        value: /helm-sops-tools/helm-plugins/
      - name: HELM_SECRETS_CURL_PATH
        value: /helm-sops-tools/curl
      - name: HELM_SECRETS_SOPS_PATH
        value: /helm-sops-tools/sops
      - name: HELM_SECRETS_KUBECTL_PATH
        value: /helm-sops-tools/kubectl
      - name: HELM_SECRETS_BACKEND
        value: sops
      - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
        value: "false"
      - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
        value: "true"
      - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
        value: "false"
      - name: HELM_SECRETS_WRAPPER_ENABLED
        value: "true"
      - name: HELM_SECRETS_HELM_PATH
        value: /usr/local/bin/helm

    # -- Init containers to add to the repo server pods
    initContainers:
      - name: sops-helm-secrets-tool
        image: harness/gitops-agent-installer-helper:v0.0.1
        imagePullPolicy: IfNotPresent
        command: [ sh, -ec ]
        args:
          - |
            cp -r /custom-tools/. /helm-sops-tools
            cp /helm-sops-tools/helm-plugins/helm-secrets/scripts/wrapper/helm.sh /helm-sops-tools/helm
            chmod +x /helm-sops-tools/*
        volumeMounts:
          - mountPath: /helm-sops-tools
            name: helm-sops-tools

    # -- Additional volumeMounts to the repo server main container
    volumeMounts:
      - mountPath: /helm-sops-tools
        name: helm-sops-tools
      - mountPath: /usr/local/sbin/helm
        subPath: helm
        name: helm-sops-tools

    # -- Additional volumes to the repo server pod
    volumes:
      - name: helm-sops-tools
        emptyDir: { }

    # -- Resource limits and requests for the repo server pods
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: "1"
        memory: 1Gi

    ## Repo server metrics service configuration
    metrics:
      # -- Deploy metrics service
      enabled: true

  ## Redis
  redis:
    # -- Resource limits and requests for redis
    resources:
      limits:
        cpu: "1"
        memory: 512Mi
      requests:
        cpu: "1"
        memory: 512Mi

  ## ArgoCD Server, Dex and Notifications Controller are not required for Harness GitOps Agent
  server:
    replicas: 0
    clusterAdminAccess:
      enabled: false
    serviceAccount:
      create: false

  dex:
    # -- Enable dex
    enabled: false

  notifications:
    # -- Enable notifications controller
    enabled: false

# <---Harness specific overrides--->

# -- Provide a name in place of `harness-gitops`
nameOverride: harness-gitops

## Variable Overrides for Harness configuration
harness:

  # Default Harness network policy rules used by all components
  networkPolicy:
    # -- Create NetworkPolicy objects for all components
    create: true

  # -- Host for GitOps Service
  gitopsServerHost: ""

## Harness GitOps Agent
agent:
  # -- GitOps Agent name
  name: gitops-agent

  # -- GitOps Agent image
  image:
    # -- Repository to use for GitOps Agent
    # @default -- `""` (defaults to global.image.repository)
    repository: harness/gitops-agent # defaults to global.image.repository
    # -- Tag to use for the GitOps Agent
    # @default -- `""` (defaults to global.image.tag)
    tag: v0.65.0 # defaults to global.image.tag
    # -- Image pull policy for GitOps Agent
    # @default -- `""` (defaults to global.image.imagePullPolicy)
    imagePullPolicy: "" # IfNotPresent

  pdb:
    # -- Deploy a [PodDisruptionBudget] for the GitOps Agent
    enabled: false
    # -- Labels to be added to GitOps Agent pdb
    labels: { }
    # -- Annotations to be added to GitOps Agent pdb
    annotations: { }
    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
    # @default -- `""` (defaults to 0 if not specified)
    minAvailable: ""
    # -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).
    ## Has higher precedence over `server.pdb.minAvailable`
    maxUnavailable: ""

  ## Proxy config for GitOps Agent
  proxy:
    # -- Enable Proxy
    enabled: false

    # -- Add HTTP proxy
    httpProxy: {}

    # -- Add HTTPS proxy
    httpsProxy: {}

  serviceAccount:
    # -- Create agent service account
    create: true
    # -- Agent service account name
    name: gitops-agent
    # -- Annotations applied to created service account
    annotations: { }
    # -- Labels applied to created service account
    labels: { }
    # -- Automount API credentials for the Service Account
    automountServiceAccountToken: false

  autoscaling:
    # -- Enable Horizontal Pod Autoscaler ([HPA]) for the GitOps Agent
    enabled: false
    # -- Minimum number of replicas for the GitOps Agent [HPA]
    minReplicas: 1
    # -- Maximum number of replicas for the GitOps Agent [HPA]
    maxReplicas: 5
    # -- Average CPU utilization percentage for the GitOps Agent [HPA]
    targetCPUUtilizationPercentage: 50
    # -- Average memory utilization percentage for the GitOps Agent [HPA]
    targetMemoryUtilizationPercentage: 50
    # -- Configures the scaling behavior of the target in both Up and Down directions.
    behavior: {}
      # scaleDown:
      #  stabilizationWindowSeconds: 300
      #  policies:
      #   - type: Pods
      #     value: 1
      #     periodSeconds: 180
      # scaleUp:
      #   stabilizationWindowSeconds: 300
      #   policies:
      #   - type: Pods
      #     value: 2
    #     periodSeconds: 60
    # -- Configures custom HPA metrics for the Argo CD server
    # Ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
    metrics: []

## Harness GitOps Agent upgrader
upgrader:
  # -- Agent upgrader name
  name: gitops-agent-upgrader

  # -- Enable Harness GitOps agent upgrader
  enabled: true

  # -- Frequency of upgrader cron job
  cron: "0 */4 * * *"

  # -- Starting deadline for cron job
  startDeadline: 20

  # -- Docker image for upgrader
  image: harness/upgrader:latest

# <---Duplicated Argo CD overrides for overridden templates--->

global:
  image:
    tag: v2.9.3

repoServer:
  name: repo-server

applicationSet:
  name: applicationset-controller

controller:
  name: application-controller

redis:
  name: redis

